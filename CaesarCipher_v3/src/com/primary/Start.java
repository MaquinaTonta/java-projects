/*
 * Caesar Cipher
 *
 * This is a project that exemplifies the use of the Caesar Cipher. It also can
 * be used for personal purposes such as communication of information lacking 
 * relevance or whichever usage found by the user.
 *
 * Author: Eng. Eduardo Basurto VÃ¡zquez
 * Email: contacto.ebv@gmail.com
 *
 * 2017 (c) Maquina Tonta
 * Email: maquinatonta1@gmail.com
 * 
 */
package com.primary;

import com.security.Caesar;
import com.util.RepeatedCharacters;
import java.awt.Image;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.Map;
import java.util.Scanner;
import java.util.TreeMap;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;

/**
 *
 * @author Ing. Eduardo Basurto
 */
public class Start extends javax.swing.JFrame {

    private final RepeatedCharacters repeatedChars;
    private File alphabetFile;
    private boolean alphaOK = false;

    /**
     * Creates new form Inicio.
     * <p>
     * Also:
     * <ol>
     * <li>Creates RepeatedCharacters object</li>
     * <li>Initialize components</li>
     * <li>Establishes the send button as the default button</li>
     * <li>Sets the icon for the frame</li>
     * <li>Executes <code>implementListener</code> method</li>
     * <li>Check the text field for the first time</li>
     * </ol>
     */
    public Start() {
        this.repeatedChars = new RepeatedCharacters();
        initComponents();

        this.setLocationRelativeTo(null);
        this.getRootPane().setDefaultButton(sendButton);
        this.setIcon();
        implementListener();                                                                                                                                                                                                                                                                                                                                                                                                     
        checkAlphabet(txtAlphabet.getText());

    }

    /**
     * Method used to implement the listener for the <code>txtAlphabet</code> 
     * text field. The listener used works to verify if data has changed, 
     * removed or inserted in the text field.
     */
    private void implementListener() {
        txtAlphabet.getDocument().addDocumentListener(new DocumentListener() {

            @Override
            public void insertUpdate(DocumentEvent e) {
                checkAlphabet(txtAlphabet.getText());
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                checkAlphabet(txtAlphabet.getText());
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                checkAlphabet(txtAlphabet.getText());
            }

        });
    }

    /**
     * Check the alphabet contained in the <code>txtAlphabet</code> text field. 
     * It does multiple actions depending on what is contained, or depending on 
     * what is uploaded with the Browse button
     * 
     * @param alphabet The alphabet contained in the <code>txtAlphabet</code> 
     * text field
     */
    private void checkAlphabet(String alphabet) {
        if (!alphabet.isEmpty()) {
            Map<Integer, Character> repeatedCharacters = new TreeMap<>();
            repeatedCharacters = repeatedChars.setRepeatedChars(alphabet);
            if (repeatedCharacters.isEmpty()) {
                alphaOK = true;
                warningMessage.setText(null);
            } else {
                String errors
                        = repeatedChars.toStringPositions(repeatedCharacters);
                alphaOK = false;
                warningMessage.setText("Repeated characters in position "
                        + errors);
            }
        } else {
            alphaOK = false;
            warningMessage.setText("Alphabet is empty");
        }

        if (alphaOK) {
            sendButton.setEnabled(true);
        } else {
            sendButton.setEnabled(false);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        chooserAlphabet = new javax.swing.JFileChooser();
        txtAlphabet = new javax.swing.JTextField();
        AlphabetLabel = new javax.swing.JLabel();
        titleLabel = new javax.swing.JLabel();
        warningMessage = new javax.swing.JLabel();
        sendButton = new javax.swing.JButton();
        browseButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Cifrado Cesar");
        setResizable(false);

        txtAlphabet.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        AlphabetLabel.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        AlphabetLabel.setText("Please input your alphabet:");

        titleLabel.setFont(new java.awt.Font("Broadway", 1, 36)); // NOI18N
        titleLabel.setText("Caesar Cipher");

        warningMessage.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        warningMessage.setForeground(new java.awt.Color(255, 0, 0));
        warningMessage.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        sendButton.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        sendButton.setText("SEND");
        sendButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendButtonActionPerformed(evt);
            }
        });

        browseButton.setText("Browse");
        browseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(txtAlphabet, javax.swing.GroupLayout.PREFERRED_SIZE, 445, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(AlphabetLabel)
                        .addGap(124, 124, 124)))
                .addGap(18, 18, 18)
                .addComponent(browseButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(12, 12, 12))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(28, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(warningMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 392, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(sendButton, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(titleLabel)
                        .addGap(141, 141, 141))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(titleLabel)
                .addGap(45, 45, 45)
                .addComponent(AlphabetLabel)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtAlphabet, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(browseButton, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addComponent(sendButton, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addComponent(warningMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(20, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Method used to perform an action whenever the <code>sendButton</code> 
     * button is pressed. If the alphabet inserted is fine, it sets the 
     * alphabet and creates a CaesarFrame form.
     * 
     * @param evt The event received to perform the action when the button is 
     * pressed
     */
    private void sendButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendButtonActionPerformed
        // TODO add your handling code here:
        if (alphaOK) {
            Caesar.setAlphabet(txtAlphabet.getText());
            CaesarFrame CF = new CaesarFrame();
            CF.setVisible(true);
            this.dispose();
        }
    }//GEN-LAST:event_sendButtonActionPerformed

    /**
     * Method used to perform an action whenever the <code>browseButton</code> 
     * button is pressed. It displays a <code>FileChooser</code> to help the 
     * user load the alphabet to the program. If an error occurs while loading, 
     * it will be displayed in the <code>warningMessage</code> label.
     * 
     * @param evt The event received to perform the action when the button is 
     * pressed
     */
    private void browseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseButtonActionPerformed
        // TODO add your handling code here:
        txtAlphabet.setText(null);
        String alphabetString = "";
        chooserAlphabet.setCurrentDirectory(new File("."));
        int returnVal = chooserAlphabet.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            alphabetFile = chooserAlphabet.getSelectedFile();
            try {
                Scanner s = new Scanner(alphabetFile);
                while (s.hasNext()) {
                    alphabetString += s.nextLine();
                }
            } catch (FileNotFoundException ex) {
                warningMessage.setText("Cannot find file");
            } catch (Exception ex){
                warningMessage.setText(ex.getMessage());
            }
        }
        txtAlphabet.setText(alphabetString);
        checkAlphabet(txtAlphabet.getText());
    }//GEN-LAST:event_browseButtonActionPerformed

    /**
     * Method to set the icon for the form
     */
    private void setIcon() {
        Image image = new ImageIcon(this.getClass().
                getResource("/res/caesar-cipher-icon.png")).getImage();
        this.setIconImage(image);
    }

    /**
     * Main method of the Start form
     * 
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Start.class.getName()).
                    log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new Start().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    /**
    * Label displaying the message saying "Please input your alphabet"
    */
    private javax.swing.JLabel AlphabetLabel;
    /**
    * Button that calls a File Chooser, giving the user the chance to choose a file
    *  containing the alphabet to be used.
    */
    private javax.swing.JButton browseButton;
    /**
    * Chooser used to load a file with the Alphabet for the Caesar Cipher program
    */
    private javax.swing.JFileChooser chooserAlphabet;
    /**
    * Button used for sending the alphabet value to the next class,
    * <code>CaesarFrame</code>
    */
    private javax.swing.JButton sendButton;
    /**
    * Label displaying the name of the program
    */
    private javax.swing.JLabel titleLabel;
    /**
    * Text Field that inputs the alphabet iven by the user to the program
    */
    private javax.swing.JTextField txtAlphabet;
    /**
    * Label used to display error messages
    */
    private javax.swing.JLabel warningMessage;
    // End of variables declaration//GEN-END:variables
}
